# This file is used to configure your project.
# Read more about the various options under:
# http://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files

[metadata]
name = SyncGitlab2MSProject
description = Synchronized Gitlab Issues into Microsoft Project
author = Carli* Freudenberg
author-email = carli.freudenberg@posteo.de
license = MIT
long-description = file: README.md
long-description-content-type = text/markdown; charset=UTF-8; variant=GFM
url = https://github.com/CarliJoy/SyncGitlab2MSProject
project-urls =
    Documentation = https://syncgitlab2msproject.readthedocs.io/
# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers =
    Development Status :: 4 - Beta
    Programming Language :: Python
    License :: OSI Approved :: MIT License
    Environment :: Win32 (MS Windows)
    Operating System :: Microsoft :: Windows :: Windows 10
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Topic :: Office/Business
    Typing :: Typed
[options]
zip_safe = False
packages = find:
include_package_data = True
package_dir =
    =src
# DON'T CHANGE THE FOLLOWING LINE! IT WILL BE UPDATED BY PYSCAFFOLD!
setup_requires = pyscaffold>=3.2a0,<3.3a0
# Add here dependencies of your project (semicolon/line-separated), e.g.
install_requires =
    pywin32>=228
    python-gitlab>=2.5.0
    python-dateutil>=2.8.1

# We use walrus operator, so only 3.8
python_requires = >=3.8

[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install SyncGitlab2MSProject[PDF]` like:
# PDF = ReportLab; RXP
# Add here test requirements (semicolon/line-separated)
testing =
    pytest
    pytest-cov
build_doc =
    sphinx
    recommonmark>=0.6.0
    m2r2

[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = syncgitlab2msproject.module:function
# For example:
console_scripts =
     sync_gitlab2msproject = syncgitlab2msproject.cli:run
# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[test]
# py.test options when running `python setup.py test`
# addopts = --verbose
extras = True

[tool:pytest]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
addopts =
    --cov syncgitlab2msproject --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests

[aliases]
dists = bdist_wheel

[bdist_wheel]
# Use this option if your package is pure-python
universal = 1

[build_sphinx]
source_dir = docs
build_dir = build/sphinx

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no-vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
max-line-length = 88
extend-ignore = E203, W503
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
# Some sane defaults for the code style checker flake8
exclude =
    .tox
    build
    dist
    .venv*
    .eggs
    docs/conf.py

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 3.2.3
package = syncgitlab2msproject
extensions =
    pyproject
    markdown

[mypy]
python_version = 3.8
mypy_path = mocking

[mypy-gitlab.*]
ignore_missing_imports = True
